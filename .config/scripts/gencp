#!/bin/sh

# Prompt project using fzf
project=$(ls "$HOME/builds/deployment" | fzf)

if [ -z "$project" ]; then
  echo "No project selected."
  exit 1
fi

project_dir="$HOME/builds/$project"
deployment_dir="$HOME/builds/deployment/$project"

src1="source/library"
src2="source/service"

classpath_file="$project_dir/.classpath"
project_file="$project_dir/.project"

# Relative path fallback using Python (works on macOS + Linux)
relpath() {
  python3 -c "import os.path; print(os.path.relpath('$1', '$2'))"
}

# Collect all JAR files
jar_list=$(find "$deployment_dir" -type f -name "*.jar")

echo "Generating .classpath..."
{
  echo '<?xml version="1.0" encoding="UTF-8"?>'
  echo '<classpath>'
  echo "  <classpathentry kind=\"src\" path=\"$src1\"/>"
  echo "  <classpathentry kind=\"src\" path=\"$src2\"/>"

  echo "$jar_list" | while IFS= read -r jar; do
    rel_jar=$(relpath "$jar" "$project_dir")
    echo "  <classpathentry kind=\"lib\" path=\"$rel_jar\"/>"
  done

  echo '  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>'
  echo '</classpath>'
} > "$classpath_file"

echo "Generating .project..."
{
  echo '<?xml version="1.0" encoding="UTF-8"?>'
  echo '<projectDescription>'
  echo "  <name>$project</name>"
  echo '  <comment></comment>'
  echo '  <projects></projects>'
  echo '  <buildSpec>'
  echo '    <buildCommand>'
  echo '      <name>org.eclipse.jdt.core.javabuilder</name>'
  echo '      <arguments></arguments>'
  echo '    </buildCommand>'
  echo '  </buildSpec>'
  echo '  <natures>'
  echo '    <nature>org.eclipse.jdt.core.javanature</nature>'
  echo '  </natures>'
  echo '</projectDescription>'
} > "$project_file"

echo "âœ… Done! Files created in $project_dir"

